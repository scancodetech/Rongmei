group 'surevil'
version '1.0'

apply plugin: 'java'

sourceCompatibility = 1.8

buildscript {
    ext {
        springBootVersion = '2.0.0.M4'
    }
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE'
    }

}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'org.springframework:spring-core'
    compile('org.springframework.boot:spring-boot-starter-web')
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-autoconfigure'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'cn.felord:payment-spring-boot-starter:1.0.2.RELEASE'
    compile 'com.aliyun:aliyun-java-sdk-core:3.7.0'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'net.sf.json-lib:json-lib:2.4:jdk15'
    compile 'com.amazonaws:aws-java-sdk-s3:1.10.66'
    compile 'mysql:mysql-connector-java:8.0.11'
    compile 'io.jsonwebtoken:jjwt:0.6.0'
    compile 'com.alipay.sdk:alipay-sdk-java:4.9.13.ALL'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.4.0'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.4.0'
    compile group: 'io.springfox', name: 'springfox-spi', version: '2.4.0'


    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task bootDevJar() {
    def env = "dev"
    doFirst {
        bootJar.destinationDir = file("build/libs/${env}")
        def file = new File("${buildDir}/resources/main/config/application.yml")
        println("正在编译jarr包---环境[${env}]")
        println("${buildDir}")
        def profile = ""
        file.eachLine { line ->
            if (line.endsWith("prod") && !(line = line.replace("prod", "dev")) == ("")) {
            }
            profile += line + "\r\n"
        }
        println(profile)
        file.newWriter(false).with {
            it.write(profile)
            it.flush()
            it.close()
        }
    }
    group 'build Jar'
    description 'pack a dev jar'
    dependsOn("compileJava", "processResources", "classes")
}

bootDevJar.finalizedBy bootJar

task bootProdJar() {
    def env = "prod"
    doFirst {
        bootJar.destinationDir = file("build/libs/${env}")
        def file = new File("${buildDir}/resources/main/config/application.yml")
        println("正在编译jar包---环境[${env}]")
        println("${buildDir}")
        def profile = ""
        file.eachLine { line ->
            if (line.endsWith("dev") && !(line = line.replace("dev", "prod")) == ("")) {
            }
            profile += line + "\r\n"
        }
        println(profile)
        file.newWriter(false).with {
            it.write(profile)
            it.flush()
            it.close()
        }
    }
    group 'build Jar'
    description 'pack a prod jar'
    dependsOn("compileJava", "processResources", "classes")
}

bootProdJar.finalizedBy bootJar

bootJar {
    doLast {//清除变量
        bootJar.destinationDir = file("build/libs")
    }
}